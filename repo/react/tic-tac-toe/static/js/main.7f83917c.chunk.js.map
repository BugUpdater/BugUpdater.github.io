{"version":3,"sources":["index.js"],"names":["Square","props","className","style","color","lineItem","backgroundColor","nextStep","onClick","value","Board","i","this","data","squares","row","col","line","includes","key","Array","fill","map","n","j","renderSquare","React","Component","Game","state","history","stepNumber","xIsNext","inc","slice","current","length","calculateWinner","Math","floor","getNextChar","setState","concat","step","moves","move","desc","uniqKey","place","jumpTo","reverse","winner","getMoves","status","getStatus","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f83917c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom'\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" style={{\n        color: props.lineItem ? 'orange': '#000',\n        backgroundColor: props.nextStep ? 'lightyellow' : '#fff',\n      }}\n      onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    const {\n      squares,\n      row,\n      col,\n      line,\n    } = this.props.data;\n    const lineItem = line.includes(i);\n    // nextStep提示原本下一步的位置\n    const nextStep = i === (row - 1) * 3 + col - 1;\n    return (\n      <Square key={i}\n        value={squares[i]}\n        lineItem={lineItem}\n        nextStep={nextStep}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div> */}\n        {Array(3).fill(null).map((n, i) => (\n          <div className=\"board-row\" key={i}>\n            {Array(3).fill(null).map((n, j) => {\n              return this.renderSquare(i * 3 + j);\n            })}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        // 下一步放置的坐标：行号和列号\n        row: null,\n        col: null,\n        // 胜利时连线的索引\n        line: [],\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      inc: true, // 升序\n    };\n  }\n\n  getNextChar() {\n    return this.state.xIsNext ? 'X' : 'O';\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(current) || squares[i]) {\n      return;\n    }\n\n    // 增加每一步坐标记录\n    current.row = Math.floor(i / 3) + 1;\n    current.col = i % 3 + 1;\n\n    squares[i] = this.getNextChar();\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        row: null,\n        col: null,\n        line: [],\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  getMoves(history, inc, stepNumber) {\n    const moves = history.map((step, move) => {\n      const desc = move ? `Go to move #${move}` : 'Go to game start';\n      // 用坐标组合唯一key值\n      const uniqKey = `${step.row || 0}_${step.col || 0}`;\n      // 放置的坐标\n      const place = step.row ? `(${step.row}, ${step.col})` : '';\n      return (\n        <li key={uniqKey} style={{backgroundColor: move === stepNumber ? 'bisque' : '#fff'}}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>{place}\n        </li>\n      );\n    });\n\n    // 如果不是升序，翻转一下再渲染\n    if (!inc) {\n      moves.reverse();\n    }\n    return moves;\n  }\n\n  getStatus(winner, stepNumber) {\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else if (stepNumber === 3 * 3) {\n      status = 'no one wins';\n    } else {\n      status = 'Next player: ' + this.getNextChar();\n    }\n    return status;\n  }\n\n  render() {\n    const { history, stepNumber,inc } = this.state;\n    const current = history[stepNumber];\n    const winner = calculateWinner(current);\n\n    const moves = this.getMoves(history, inc, stepNumber);\n    const status = this.getStatus(winner, stepNumber);\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            data={current}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div className=\"order-btn\">\n            <button onClick={() => this.setState({inc: !inc})}>\n              {inc ? '升序' : '降序'}\n            </button>\n          </div>\n          <ul>{moves}</ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(current) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  \n  const squares = current.squares;\n  current.line = [];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      // 保存胜利时连线的位置\n      current.line = lines[i];\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}